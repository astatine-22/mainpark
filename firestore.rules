/**
 * @fileoverview Firestore Security Rules for ParkSmart.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * and allows public read access to parking lot information. Write access to
 * parking lots is restricted. Bookings are secured to ensure users can only
 * manage their own bookings. Payment methods are strictly private to the user.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user data. Access is restricted to the
 *   authenticated user.
 * - /parking_lots/{parkingLotId}: Stores public parking lot data. Read access
 *   is public, write access is restricted.
 * - /bookings/{bookingId}: Stores booking data. Access is restricted to the
 *   user who created the booking.
 * - /parking_managers/{parkingManagerId}: Stores parking manager data. Access is restricted to the parking manager.
 * - /users/{userId}/payment_methods/{paymentMethodId}: Stores private payment
 *   method data. Access is restricted to the authenticated user.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed due to the user-centric data model.
 * - Parking lot data is publicly readable to facilitate discovery.
 * - Write operations on ParkingLots are not currently implemented, but are
 *   reserved for ParkingManagers.
 * - To simplify rules and improve performance, the Booking entity denormalizes
 *   both `userId` and `parkingLotId`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile if request.auth.uid == 'user_abc' and request.resource.data.id == 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can read/update/delete their profile at /users/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @deny (update, delete) - User with UID 'user_xyz' cannot update/delete the profile at /users/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to parking lot information, but restricts write access.
     * @path /parking_lots/{parkingLotId}
     * @allow (get, list) - Any user can read parking lot information.
     * @deny (create, update, delete) - No user can create, update or delete parking lots without specific authorization.
     * @principle Allows public read access with restricted write access.
     */
    match /parking_lots/{parkingLotId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add ParkingManager validation once that role is defined.
      allow update: if false; // TODO: Add ParkingManager validation once that role is defined.
      allow delete: if false; // TODO: Add ParkingManager validation once that role is defined.
    }

    /**
     * @description Enforces user-ownership for bookings, allowing users to manage their own bookings.
     * @path /bookings/{bookingId}
     * @allow (create) - User with UID 'user_abc' can create a booking if request.resource.data.userId == 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can read/update/delete a booking if resource.data.userId == 'user_abc'.
     * @deny (create) - User with UID 'user_xyz' cannot create a booking with userId 'user_abc'.
     * @deny (update, delete) - User with UID 'user_xyz' cannot update/delete a booking with userId 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /bookings/{bookingId} {
      function isOwnerOfBooking(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwnerOfBooking(userId) {
        return isOwnerOfBooking(userId) && resource != null;
      }

      allow get: if isOwnerOfBooking(resource.data.userId);
      allow list: if false; // Listing not supported on this collection
      allow create: if request.auth != null && isOwnerOfBooking(request.resource.data.userId);
      allow update: if isExistingOwnerOfBooking(resource.data.userId);
      allow delete: if isExistingOwnerOfBooking(resource.data.userId);
    }

    /**
     * @description Enforces parking manager-ownership for parking manager profiles.
     * @path /parking_managers/{parkingManagerId}
     * @allow (create) - Parking manager can create their profile if request.auth.uid == parkingManagerId.
     * @allow (get, update, delete) - Parking manager can read/update/delete their profile if request.auth.uid == parkingManagerId.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile at /parking_managers/manager_abc.
     * @deny (update, delete) - User with UID 'user_xyz' cannot update/delete the profile at /parking_managers/manager_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /parking_managers/{parkingManagerId} {
      function isParkingManager(parkingManagerId) {
        return request.auth != null && request.auth.uid == parkingManagerId;
      }

      function isExistingParkingManager(parkingManagerId) {
        return isParkingManager(parkingManagerId) && resource != null;
      }

      allow get: if isParkingManager(parkingManagerId);
      allow list: if false;
      allow create: if isParkingManager(parkingManagerId) && request.resource.data.id == parkingManagerId;
      allow update: if isExistingParkingManager(parkingManagerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingParkingManager(parkingManagerId);
    }

    /**
     * @description Enforces user-ownership for payment methods, ensuring that only the user can access their own payment methods.
     * @path /users/{userId}/payment_methods/{paymentMethodId}
     * @allow (create) - User with UID 'user_abc' can create a payment method if request.auth.uid == 'user_abc' and request.resource.data.userId == 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can read/update/delete a payment method at /users/user_abc/payment_methods/payment_123.
     * @deny (create) - User with UID 'user_xyz' cannot create a payment method at /users/user_abc/payment_methods/payment_123.
     * @deny (update, delete) - User with UID 'user_xyz' cannot update/delete the payment method at /users/user_abc/payment_methods/payment_123.
     * @principle Enforces strict user-ownership for all operations on payment methods.
     */
    match /users/{userId}/payment_methods/{paymentMethodId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}