/**
 * @fileoverview Firestore Security Rules for ParkSmart.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant data model where users own their data and
 * authorized managers control parking lot data. The rules prioritize security by
 * default, restricting access unless explicitly granted.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, secured by user ID.
 * - /parking_lots/{parkingLotId}: Stores parking lot information; publicly readable,
 *   write-restricted to authorized parking managers. The `managerId` field is used
 *   to control write access.
 * - /bookings/{bookingId}: Stores booking data. Includes `userId` and `parkingLotId`
 *   for simpler authorization checks.
 * - /parking_managers/{parkingManagerId}: Stores parking manager profiles.
 * - /users/{userId}/payment_methods/{paymentMethodId}: Stores payment methods, secured
 *   by user ID.
 *
 * Key Security Decisions:
 * - Users can only read/write their own user documents.
 * - Listing all users is disallowed.
 * - Parking lot data is publicly readable but only modifiable by authorized managers.
 * - Bookings can only be created with matching `userId`
 * - Payment methods are private to each user.
 *
 * Denormalization for Authorization:
 * - The `Booking` entity includes both `userId` and `parkingLotId` fields. This avoids
 *   needing to perform additional `get()` calls to related documents during authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the document.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for /users/{userId} documents.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their own profile.
     * @deny (create) User tries to create a profile with a different UID.
     * @allow (get, update, delete) User with matching UID can read, update, and delete their own profile.
     * @deny (get, update, delete) User tries to read, update, or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for /parking_lots/{parkingLotId} documents.
     * @path /parking_lots/{parkingLotId}
     * @allow (get, list) Anyone can read parking lot information.
     * @deny (create, update, delete) Only an authorized parking manager can create, update, or delete a parking lot. // TODO: Implement parking manager role check.
     * @principle Public read access with owner-only writes (requires ParkingManager role check, implement in the future).
     */
    match /parking_lots/{parkingLotId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once ParkingManager roles are established.
    }

    /**
     * @description Rule for /bookings/{bookingId} documents.
     * @path /bookings/{bookingId}
     * @allow (create) User can create a booking if the userId matches their auth UID.
     * @deny (create) User tries to create a booking for a different user.
     * @allow (get, update, delete) User can read, update, or delete their own booking.
     * @deny (get, update, delete) User tries to read, update, or delete another user's booking.
     * @principle Enforces document ownership for all operations.
     */
    match /bookings/{bookingId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if false;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Rule for /parking_managers/{parkingManagerId} documents.
     * @path /parking_managers/{parkingManagerId}
     * @allow (create) Only an authenticated parking manager can create their profile.
     * @deny (create) User tries to create a parking manager profile with a different UID.
     * @allow (get, update, delete) Parking manager can read, update, and delete their own profile.
     * @deny (get, update, delete) User tries to read, update, or delete another parking manager's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /parking_managers/{parkingManagerId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn() && request.auth.uid == parkingManagerId;
      allow list: if false;
      allow update: if isSignedIn() && request.auth.uid == parkingManagerId;
      allow delete: if isSignedIn() && request.auth.uid == parkingManagerId;
    }

    /**
     * @description Rule for /users/{userId}/payment_methods/{paymentMethodId} documents.
     * @path /users/{userId}/payment_methods/{paymentMethodId}
     * @allow (create) User with matching UID can create their own payment method.
     * @deny (create) User tries to create a payment method for a different UID.
     * @allow (get, update, delete) User with matching UID can read, update, and delete their own payment method.
     * @deny (get, update, delete) User tries to read, update, or delete another user's payment method.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/payment_methods/{paymentMethodId} {
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId) && resource.data.userId == userId;
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId) && resource.data.userId == userId;
    }
  }
}